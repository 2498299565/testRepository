#realm方式
#[main]
#自定义realm
#customRealm= com.demo.realm.CustomRealm
#将realm设置到securityManager中，类似于spring的依赖注入
#securityManager.realms=$customRealm


;[main]
;credentialsMatcher=org.apache.shiro.authc.credential.HashedCredentialsMatcher
;#指定加密算法
;credentialsMatcher.hashAlgorithmName=md5
;#指定加密次数
;credentialsMatcher.hashIterations=3
;#自定义Realm
;customRealm= com.demo.realm.CustomRealm
;customRealm.credentialsMatcher=$credentialsMatcher
;securityManager.realms=$customRealm

#授权
[users]
#用户zhang的密码是123，此用户具有role1和role2两个角色
zhang=123,role1,role2
wang=123,role2
[roles]
#角色role1对资源user拥有create、update权限
role1=user:create,user:update
#角色role2对资源user拥有create、delete权限
role2=user:create,user:delete
#角色role3对资源user拥有create权限=> delete update find
role3=user:create


